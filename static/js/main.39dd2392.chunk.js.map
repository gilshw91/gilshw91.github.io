{"version":3,"sources":["components/Display.js","components/MapContainer.js","App.js","reportWebVitals.js","index.js"],"names":["Display","isLoading","fetchError","currentLocation","MapMode","googleMapsKey","onDisplayClicked","viewBy","role","aria-label","className","title","width","height","frameBorder","style","border","src","allowFullScreen","type","name","id","value","onClick","defaultChecked","htmlFor","country_name","city","MapContainer","useState","setIsLoading","setFetchError","setCurrentLocation","displayOption","setDisplayOption","useEffect","fetch","then","response","json","data","catch","err","message","latitude","longitude","view","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8MA0EeA,EAxEC,SAAC,GAQX,EAPJC,UAOI,EANJC,WAMK,IALLC,EAKI,EALJA,gBACAC,EAII,EAJJA,QACAC,EAGI,EAHJA,cACAC,EAEI,EAFJA,iBACAC,EACI,EADJA,OAEA,OACE,qCACE,sDACuB,IACrB,sBAAMC,KAAK,MAAMC,aAAW,aAA5B,6BAKF,sBAAKC,UAAU,MAAf,UACE,wBACEC,MAAM,OACNC,MAAM,OACNC,OAAO,OACPC,YAAY,IACZC,MAAO,CAAEC,OAAQ,KACjBC,IAAG,+CAA0Cb,EAA1C,gBAAyDC,EAAzD,cAA4EE,GAC/EW,iBAAe,IAGhBf,GACC,sBAAKO,UAAU,OAAf,UACE,sBAAKA,UAAU,UAAf,UACE,uBACES,KAAK,QACLC,KAAK,UACLC,GAAG,OACHC,MAAM,OACNC,QAAS,kBAAMjB,EAAiB,SAChCkB,gBAAc,IAEhB,uBAAOC,QAAQ,OAAf,0BACA,uBACA,uBACEN,KAAK,QACLE,GAAG,SACHD,KAAK,UACLE,MAAM,SACNC,QAAS,kBAAMjB,EAAiB,aAElC,uBAAOmB,QAAQ,SAAf,oCAEF,uBACA,+CACCtB,EAAgBuB,aACjB,uBACA,4CACCvB,EAAgBwB,eCDdC,MAtDf,WACE,IADsB,EAIYC,oBAAS,GAJrB,mBAIf5B,EAJe,KAIJ6B,EAJI,OAKcD,mBAAS,IALvB,mBAKf3B,EALe,KAKH6B,EALG,OAMwBF,mBAAS,MANjC,mBAMf1B,EANe,KAME6B,EANF,OAOoBH,mBAAS,QAP7B,mBAOfI,EAPe,KAOAC,EAPA,KAUtBC,qBAAU,WACR,IACEC,MAAM,iCAAD,OAVM,6DAWRC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GACLR,EAAmBQ,GACnBV,GAAa,MAEdW,OAAM,SAACC,GAAD,OAASX,EAAcW,EAAIC,YACpC,MAAOD,GACPX,EAAcW,EAAIC,YAEnB,IAGH,IAAMpC,EACJJ,IACmB,SAAlB8B,EAAA,UACM9B,EAAgBwB,KADtB,YAC8BxB,EAAgBuB,cAD9C,UAEMvB,EAAgByC,SAFtB,YAEkCzC,EAAgB0C,YAErD,OACE,mCACG5C,EACC,6CACEC,EACF,gDAAmBA,KACjBC,GAAmBA,EAAgBwC,QACrC,uDAA0BxC,EAAgBwC,WACxCxC,EACF,cAAC,EAAD,CACEF,UAAWA,EACXC,WAAYA,EACZC,gBAAiBA,EACjBC,QAzCQ,QA0CRC,cA5Cc,0CA6CdC,iBAAkB,SAACwC,GAAD,OAAUZ,EAAiBY,IAC7CvC,OAAQA,IAER,QCzCKwC,EARH,WAKV,OAAO,cAAC,EAAD,KCIMC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBb,MAAK,YAAkD,IAA/Cc,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAG1BZ,K","file":"static/js/main.39dd2392.chunk.js","sourcesContent":["import PropTypes from \"prop-types\";\r\n\r\nconst Display = ({\r\n  isLoading,\r\n  fetchError,\r\n  currentLocation,\r\n  MapMode,\r\n  googleMapsKey,\r\n  onDisplayClicked,\r\n  viewBy,\r\n}) => {\r\n  return (\r\n    <>\r\n      <h1>\r\n        What Is My Location?{\" \"}\r\n        <span role=\"img\" aria-label=\"point_down\">\r\n          ðŸ‘‡\r\n        </span>\r\n      </h1>\r\n\r\n      <div className=\"map\">\r\n        <iframe\r\n          title=\"gMap\"\r\n          width=\"100%\"\r\n          height=\"100%\"\r\n          frameBorder=\"0\"\r\n          style={{ border: \"0\" }}\r\n          src={`https://www.google.com/maps/embed/v1/${MapMode}?key=${googleMapsKey}&q=${viewBy}`}\r\n          allowFullScreen\r\n        ></iframe>\r\n\r\n        {currentLocation && (\r\n          <div className=\"info\">\r\n            <div className=\"display\">\r\n              <input\r\n                type=\"radio\"\r\n                name=\"display\"\r\n                id=\"city\"\r\n                value=\"city\"\r\n                onClick={() => onDisplayClicked(\"city\")}\r\n                defaultChecked\r\n              />\r\n              <label htmlFor=\"city\">View by city</label>\r\n              <br />\r\n              <input\r\n                type=\"radio\"\r\n                id=\"latlng\"\r\n                name=\"display\"\r\n                value=\"latlng\"\r\n                onClick={() => onDisplayClicked(\"latlng\")}\r\n              />\r\n              <label htmlFor=\"latlng\">View exact location</label>\r\n            </div>\r\n            <hr />\r\n            <strong>Country: </strong>\r\n            {currentLocation.country_name}\r\n            <br />\r\n            <strong>City: </strong>\r\n            {currentLocation.city}\r\n          </div>\r\n        )}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nDisplay.propTypes = {\r\n  currentLocation: PropTypes.object.isRequired,\r\n  MapMode: PropTypes.string.isRequired,\r\n  googleMapsKey: PropTypes.string.isRequired,\r\n  onDisplayClicked: PropTypes.func.isRequired,\r\n  viewBy: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default Display;\r\n","import { useState, useEffect } from \"react\";\r\nimport Display from \"./Display\";\r\n\r\nfunction MapContainer() {\r\n  const googleMapsKey = \"AIzaSyCdQymwSuF0P6Ee-ffX0ZtWjpJdpaT5eLk\";\r\n  const ipData = \"dcb19aafdd3accd0ca61b014f91a6cc5888d57f4f703a9758da3751e\";\r\n  const MapMode = \"place\"; // options: place, view, directions, streetview, search\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [fetchError, setFetchError] = useState(\"\");\r\n  const [currentLocation, setCurrentLocation] = useState(null); // Contains the respones from the ipData about the users' location\r\n  const [displayOption, setDisplayOption] = useState(\"city\");\r\n\r\n  // Fetching users' data, using ipData service\r\n  useEffect(() => {\r\n    try {\r\n      fetch(`https://api.ipdata.co?api-key=${ipData}`)\r\n        .then((response) => response.json())\r\n        .then((data) => {\r\n          setCurrentLocation(data);\r\n          setIsLoading(false);\r\n        })\r\n        .catch((err) => setFetchError(err.message));\r\n    } catch (err) {\r\n      setFetchError(err.message);\r\n    }\r\n  }, []);\r\n\r\n  // Controls the option to display the location (show city area or exact location)\r\n  const viewBy =\r\n    currentLocation &&\r\n    (displayOption === \"city\"\r\n      ? `${currentLocation.city},${currentLocation.country_name}`\r\n      : `${currentLocation.latitude},${currentLocation.longitude}`);\r\n\r\n  return (\r\n    <>\r\n      {isLoading ? (\r\n        <div>Loading...</div>\r\n      ) : fetchError ? (\r\n        <div>Fetch error: {fetchError}</div>\r\n      ) : currentLocation && currentLocation.message ? (\r\n        <div>Failed to load map: {currentLocation.message}</div>\r\n      ) : currentLocation ? (\r\n        <Display\r\n          isLoading={isLoading}\r\n          fetchError={fetchError}\r\n          currentLocation={currentLocation}\r\n          MapMode={MapMode}\r\n          googleMapsKey={googleMapsKey}\r\n          onDisplayClicked={(view) => setDisplayOption(view)}\r\n          viewBy={viewBy}\r\n        />\r\n      ) : null}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default MapContainer;\r\n","import \"./App.css\";\r\nimport MapContainer from \"./components/MapContainer\";\r\n\r\nconst App = () => {\r\n  // React App which displays the users' location by his city\r\n  // or by his latitude and longitude and an information of\r\n  // the users' country and city\r\n  // Using idData service and google maps API\r\n  return <MapContainer />;\r\n};\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\nreportWebVitals();\r\n"],"sourceRoot":""}