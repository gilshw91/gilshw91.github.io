{"version":3,"sources":["components/Display.js","components/MapContainer.js","App.js","reportWebVitals.js","index.js"],"names":["Display","isLoading","fetchError","currentLocation","MAP_MODE","googleMapsKey","OnDisplayClicked","viewBy","message","role","aria-label","className","title","width","height","frameBorder","style","border","src","allowFullScreen","type","name","value","onClick","view","defaultChecked","country_name","city","prototype","PropTypes","bool","isRequired","string","object","func","MapContainer","useState","setIsLoading","setFetchError","setCurrentLocation","displayOption","setDisplayOption","useEffect","fetch","then","response","json","data","catch","err","latitude","longitude","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yNAEMA,EAAU,SAAC,GAQV,IAPLC,EAOI,EAPJA,UACAC,EAMI,EANJA,WACAC,EAKI,EALJA,gBACAC,EAII,EAJJA,SACAC,EAGI,EAHJA,cACAC,EAEI,EAFJA,iBACAC,EACI,EADJA,OAEA,OACE,mCACGN,EACC,6CACEC,EACF,gDAAmBA,KACjBC,GAAmBA,EAAgBK,QACrC,uDAA0BL,EAAgBK,WAE1C,qCACE,sDACuB,IACrB,sBAAMC,KAAK,MAAMC,aAAW,aAA5B,6BAKF,sBAAKC,UAAU,MAAf,UACE,wBACEC,MAAM,OACNC,MAAM,OACNC,OAAO,OACPC,YAAY,IACZC,MAAO,CAAEC,OAAQ,KACjBC,IAAG,+CAA0Cd,EAA1C,gBAA0DC,EAA1D,cAA6EE,GAChFY,iBAAe,IAGhBhB,GACC,sBAAKQ,UAAU,OAAf,UACE,sBAAKA,UAAU,UAAf,UACE,uBACES,KAAK,QACLC,KAAK,UACLC,MAAM,OACNC,QAAS,SAACC,GAAD,OAAUlB,EAAiB,SACpCmB,gBAAc,IANlB,eASE,uBACA,uBACEL,KAAK,QACLC,KAAK,UACLC,MAAM,SACNC,QAAS,SAACC,GAAD,OAAUlB,EAAiB,aAdxC,yBAkBA,uBACA,+CACCH,EAAgBuB,aACjB,uBACA,4CACCvB,EAAgBwB,iBAUjC3B,EAAQ4B,UAAY,CAClB3B,UAAW4B,IAAUC,KAAKC,WAC1B7B,WAAY2B,IAAUG,OACtB7B,gBAAiB0B,IAAUI,OAAOF,WAClC3B,SAAUyB,IAAUG,OAAOD,WAC3B1B,cAAewB,IAAUG,OAAOD,WAChCzB,iBAAkBuB,IAAUK,KAAKH,WACjCxB,OAAQsB,IAAUG,OAAOD,YAGZ/B,QCrCAmC,MA5Cf,WACE,IADsB,EAIYC,oBAAS,GAJrB,mBAIfnC,EAJe,KAIJoC,EAJI,OAKcD,mBAAS,IALvB,mBAKflC,EALe,KAKHoC,EALG,OAMwBF,mBAAS,MANjC,mBAMfjC,EANe,KAMEoC,EANF,OAOoBH,mBAAS,QAP7B,mBAOfI,EAPe,KAOAC,EAPA,KAUtBC,qBAAU,WACR,IACEC,MAAM,iCAAD,OAVM,6DAWRC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GACLR,EAAmBQ,GACnBV,GAAa,MAEdW,OAAM,SAACC,GAAD,OAASX,EAAcW,EAAIzC,YACpC,MAAOyC,GACPX,EAAcW,EAAIzC,YAEnB,IAGH,IAAMD,EACJJ,IACmB,SAAlBqC,EAAA,UACMrC,EAAgBwB,KADtB,YAC8BxB,EAAgBuB,cAD9C,UAEMvB,EAAgB+C,SAFtB,YAEkC/C,EAAgBgD,YAErD,OACE,cAAC,EAAD,CACElD,UAAWA,EACXC,WAAYA,EACZC,gBAAiBA,EACjBC,SAjCa,QAkCbC,cApCkB,0CAqClBC,iBAAkB,SAACkB,GAAD,OAAUiB,EAAiBjB,IAC7CjB,OAAQA,KC/BC6C,EARH,WAKV,OAAO,cAAC,EAAD,KCIMC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBX,MAAK,YAAkD,IAA/CY,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.698314d8.chunk.js","sourcesContent":["import PropTypes from \"prop-types\";\r\n\r\nconst Display = ({\r\n  isLoading,\r\n  fetchError,\r\n  currentLocation,\r\n  MAP_MODE,\r\n  googleMapsKey,\r\n  OnDisplayClicked,\r\n  viewBy,\r\n}) => {\r\n  return (\r\n    <>\r\n      {isLoading ? (\r\n        <div>Loading...</div>\r\n      ) : fetchError ? (\r\n        <div>Fetch error: {fetchError}</div>\r\n      ) : currentLocation && currentLocation.message ? (\r\n        <div>Failed to load map: {currentLocation.message}</div>\r\n      ) : (\r\n        <>\r\n          <h1>\r\n            What Is My Location?{\" \"}\r\n            <span role=\"img\" aria-label=\"point_down\">\r\n              ðŸ‘‡\r\n            </span>\r\n          </h1>\r\n\r\n          <div className=\"map\">\r\n            <iframe\r\n              title=\"gMap\"\r\n              width=\"100%\"\r\n              height=\"100%\"\r\n              frameBorder=\"0\"\r\n              style={{ border: \"0\" }}\r\n              src={`https://www.google.com/maps/embed/v1/${MAP_MODE}?key=${googleMapsKey}&q=${viewBy}`}\r\n              allowFullScreen\r\n            ></iframe>\r\n\r\n            {currentLocation && (\r\n              <div className=\"info\">\r\n                <div className=\"display\">\r\n                  <input\r\n                    type=\"radio\"\r\n                    name=\"display\"\r\n                    value=\"city\"\r\n                    onClick={(view) => OnDisplayClicked(\"city\")}\r\n                    defaultChecked\r\n                  />\r\n                  View by city\r\n                  <br />\r\n                  <input\r\n                    type=\"radio\"\r\n                    name=\"display\"\r\n                    value=\"latlng\"\r\n                    onClick={(view) => OnDisplayClicked(\"latlng\")}\r\n                  />\r\n                  View exact location\r\n                </div>\r\n                <hr />\r\n                <strong>Country: </strong>\r\n                {currentLocation.country_name}\r\n                <br />\r\n                <strong>City: </strong>\r\n                {currentLocation.city}\r\n              </div>\r\n            )}\r\n          </div>\r\n        </>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nDisplay.prototype = {\r\n  isLoading: PropTypes.bool.isRequired,\r\n  fetchError: PropTypes.string,\r\n  currentLocation: PropTypes.object.isRequired,\r\n  MAP_MODE: PropTypes.string.isRequired,\r\n  googleMapsKey: PropTypes.string.isRequired,\r\n  OnDisplayClicked: PropTypes.func.isRequired,\r\n  viewBy: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default Display;\r\n","import { useState, useEffect } from \"react\";\r\nimport Display from \"./Display\";\r\n\r\nfunction MapContainer() {\r\n  const googleMapsKey = \"AIzaSyCdQymwSuF0P6Ee-ffX0ZtWjpJdpaT5eLk\";\r\n  const ipData = \"dcb19aafdd3accd0ca61b014f91a6cc5888d57f4f703a9758da3751e\";\r\n  const MAP_MODE = \"place\"; // options: place, view, directions, streetview, search\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [fetchError, setFetchError] = useState(\"\");\r\n  const [currentLocation, setCurrentLocation] = useState(null); // Contains the respones from the ipData about the users' location\r\n  const [displayOption, setDisplayOption] = useState(\"city\");\r\n\r\n  // Fetching users' data, using ipData service\r\n  useEffect(() => {\r\n    try {\r\n      fetch(`https://api.ipdata.co?api-key=${ipData}`)\r\n        .then((response) => response.json())\r\n        .then((data) => {\r\n          setCurrentLocation(data);\r\n          setIsLoading(false);\r\n        })\r\n        .catch((err) => setFetchError(err.message));\r\n    } catch (err) {\r\n      setFetchError(err.message);\r\n    }\r\n  }, []);\r\n\r\n  // Controls the option to display the location (show city area or exact location)\r\n  const viewBy =\r\n    currentLocation &&\r\n    (displayOption === \"city\"\r\n      ? `${currentLocation.city},${currentLocation.country_name}`\r\n      : `${currentLocation.latitude},${currentLocation.longitude}`);\r\n\r\n  return (\r\n    <Display\r\n      isLoading={isLoading}\r\n      fetchError={fetchError}\r\n      currentLocation={currentLocation}\r\n      MAP_MODE={MAP_MODE}\r\n      googleMapsKey={googleMapsKey}\r\n      OnDisplayClicked={(view) => setDisplayOption(view)}\r\n      viewBy={viewBy}\r\n    />\r\n  );\r\n}\r\n\r\nexport default MapContainer;\r\n","import \"./App.css\";\nimport MapContainer from \"./components/MapContainer\";\n\nconst App = () => {\n  // React App which displays the users' location by his city\n  // or by his latitude and longitude and an information of\n  // the users' country and city\n  // Using idData service and google maps API\n  return <MapContainer />;\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n// import './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}